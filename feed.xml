<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom"><id>https://github.com/isvicy/gitblog</id><title>RSS feed of isvicy's gitblog</title><updated>2024-11-19T12:37:58.806672+00:00</updated><link href="https://github.com/isvicy/gitblog"/><link href="https://raw.githubusercontent.com/isvicy/gitblog/master/feed.xml" rel="self"/><generator uri="https://lkiesow.github.io/python-feedgen" version="1.0.0">python-feedgen</generator><entry><id>https://github.com/isvicy/gitblog/issues/3</id><title>Neovim 小技巧</title><updated>2024-11-19T12:37:59.097864+00:00</updated><content type="html"><![CDATA[<p><strong>本文旨在记录自己在使用 Neovim Debug 以及和 AI 结对编程的过程中使用的一些有助于提升效率的小技巧。</strong></p>
<h3>1. 在 Neovim 中编译 Go 程序，并且将编译失败的结果同步到 quicklist 窗口</h3>
<h4>场景</h4>
<ol>
<li>在频繁编辑的项目里，由于可能存在语法错误，Trouble 这类聚合 project 级别错误信息的插件可能会短暂不工作，此时可以使用此功能来实现和 Trouble Diagnosis 一样的效果；</li>
<li>Go Build 可以作为实际检验代码是否还有语法错误的最后一环；</li>
</ol>
<h4>code piece</h4>
<pre><code class="language-lua">-- Run go build asynchronously and populate errors to quickfix.
-- This should be used as a supplement of trouble diagnostics.
local function async_go_build_quickfix()
  -- Clear the quickfix list first
  vim.fn.setqflist({}, &quot;r&quot;)

  -- Show a message that build started
  vim.notify(&quot;Go build started...&quot;, vim.log.levels.INFO)

  -- Create jobs for async execution
  local stderr_data = {}
  local job = vim.fn.jobstart(&quot;go build ./...&quot;, {
    on_stderr = function(_, data)
      if data then
        for _, line in ipairs(data) do
          if line ~= &quot;&quot; then
            table.insert(stderr_data, line)
          end
        end
      end
    end,
    on_exit = function(_, exit_code)
      if exit_code == 0 then
        vim.schedule(function()
          vim.notify(&quot;Build successful!&quot;, vim.log.levels.INFO)
        end)
        return
      end

      -- Parse the error output
      local errors = {}
      for _, line in ipairs(stderr_data) do
        -- Match Go error format: file:line:col: message
        local file, lnum, col, msg = line:match(&quot;(.+):(%d+):(%d+): (.*)&quot;)
        if file and lnum and col and msg then
          table.insert(errors, {
            filename = file,
            lnum = tonumber(lnum),
            col = tonumber(col),
            text = msg,
            type = &quot;E&quot;,
          })
        end
      end

      -- Update quickfix in the main thread
      vim.schedule(function()
        vim.fn.setqflist(errors)
        if #errors &gt; 0 then
          vim.cmd(&quot;copen&quot;)
          vim.notify(&quot;Build failed! Check quickfix list.&quot;, vim.log.levels.ERROR)
        end
      end)
    end,
  })

  if job == 0 then
    vim.notify(&quot;Failed to start go build&quot;, vim.log.levels.ERROR)
  elseif job == -1 then
    vim.notify(&quot;Invalid arguments for go build&quot;, vim.log.levels.ERROR)
  end
end
-- Create a command to run the build
vim.api.nvim_create_user_command(&quot;GoBuild&quot;, async_go_build_quickfix, {})
-- Create keymap
vim.keymap.set(&quot;n&quot;, &quot;&lt;Leader&gt;cgb&quot;, &quot;:GoBuild&lt;CR&gt;&quot;, { silent = true, noremap = true })
</code></pre>
<h4>使用说明</h4>
<p>将此段代码加入到你原本存放 auto cmd 的文件里，之后使用 <code>&lt;leader&gt;cgb</code> (cgb -&gt; code golang build) 即可达到标题里的效果。</p>
<h3>2. 快速复制当前行的 diagnostic 信息</h3>
<h4>场景</h4>
<p>当和浏览器端的 AI 结对编程时，此功能可以快速复制错误提示，方便快速粘贴，提供信息给 AI，供其理解后修复。</p>
<pre><code class="language-lua">-- Copy diagnostic info to system clipboard.
-- This could be useful when you chat with AI Models to supply context.
local function copy_diagnostic()
  local current_line = vim.fn.line(&quot;.&quot;) - 1
  local current_buf = vim.api.nvim_get_current_buf()

  local diagnostics = vim.diagnostic.get(current_buf, { lnum = current_line })
  if #diagnostics == 0 then
    vim.notify(&quot;No diagnostics&quot;, vim.log.levels.WARN, { title = &quot;Copy&quot; })
    return
  end

  local messages = {}
  for _, diagnostic in ipairs(diagnostics) do
    table.insert(messages, diagnostic.message)
  end
  local diagnostic_text = table.concat(messages, &quot;\n&quot;)

  -- Copy to system clipboard and unnamed register
  vim.fn.setreg(&quot;+&quot;, diagnostic_text)
  vim.fn.setreg(&#x27;&quot;&#x27;, diagnostic_text)

  -- Use shorter notification without the actual text
  vim.notify(&quot;Diagnostic copied&quot;, vim.log.levels.INFO, { title = &quot;Copy&quot; })
end

-- Create command with silent option
vim.api.nvim_create_user_command(&quot;CopyDiagnostic&quot;, copy_diagnostic, {})
-- Add keymapping with silent option
vim.keymap.set(&quot;n&quot;, &quot;&lt;leader&gt;ccd&quot;, function()
  copy_diagnostic()
end, {
  silent = true, -- This ensures no &quot;Press ENTER&quot; prompt
  desc = &quot;Copy diagnostic message&quot;,
})
</code></pre>
<h4>使用说明</h4>
<p>将此段代码放置到你存放 auto cmd 的文件内，然后使用 <code>&lt;leader&gt;ccd</code> (ccd -&gt; code copy diagnostic) 即可复制当前行的错误信息到剪切板。</p>
]]></content><link href="https://github.com/isvicy/gitblog/issues/3"/><category term="neovim"/><published>2024-11-17T02:20:00+00:00</published></entry><entry><id>https://github.com/isvicy/gitblog/issues/1</id><title>设置 WSL 开机启动</title><updated>2024-11-19T12:37:59.230243+00:00</updated><content type="html"><![CDATA[<p>之所以有这个需求是因为有一台机器 （以下称作机器 A）作为我某一个内网（以下称作内网 A ）的入口，是以 tailscale 节点的形式加入到我的大内网的，并且注册了 sub route 到 tailscale 网络。基于此，如果我其他 tailscale 节点想要访问内网 A，在 sub route 覆盖范围内的 ip 的流量会自动被 tailscale 路由到机器 A，然后再路由到实际 ip 对应的服务器。</p>
<p>但当我访问部分内网 A 中机器托管的域名时，此时流量不会被 tailscale 自动代理，需要借助诸如  ssh 动态代理之类的方式，建立动态代理之后在终端或者浏览器中使用来访问对应域名。</p>
<p>由于机器 A 是 windows 系统，ssh server 是通过 WSL 启动的，为了保证 ssh 尽量任何时候都可以直连来建立动态代理，需要在 windows 自动更新或者异常重启之后，自动启动 WSL。</p>
<p>使用的启动脚本如下：</p>
<pre><code class="language-vbs">&#x27; Note: put this script in `C:\Users\&lt;username&gt;\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup`
Set ws = WScript.CreateObject(&quot;wscript.shell&quot;)

&#x27; Start WSL
ws.run &quot;wsl -d Ubuntu-24.04&quot;, 0

&#x27; Wait for a moment to ensure WSL has started
WScript.Sleep 5000  &#x27; Wait for 5 seconds, adjust as needed

&#x27; Create and execute PowerShell command using BurntToast
&#x27; Note: you need installed BurntToast before using this command.
&#x27; Do this before in you powershell with admin privilege: `Install-Module -Name BurntToast -Force`,
&#x27; and then test the installation with: `New-BurntToastNotification -Text &quot;Hello&quot;, &quot;This is a test notification&quot;`
ps_cmd = &quot;powershell -Command &quot;&quot;New-BurntToastNotification -Text &#x27;WSL Started&#x27;, &#x27;Ubuntu-24.04 has been started&#x27;&quot;&quot;&quot;
ws.run ps_cmd, 0
</code></pre>
<p>代码已经提供了注释，包括脚本放置的位置。 </p>
<p>最终实现的效果是 Windows 开机之后会自动执行此脚本，脚本启动 WSL 之后，会等待五秒钟，然后弹出一个 Windows 通知。</p>
<p><img src="https://github.com/user-attachments/assets/551765dd-a00b-4be0-89b2-a3894d4a360c" alt="image" /></p>
]]></content><link href="https://github.com/isvicy/gitblog/issues/1"/><category term="trick"/><category term="windows"/><published>2024-11-16T08:41:30+00:00</published></entry></feed>